lsof -i:port
    查看端口号和进程号
chsh -s /bin/zsh
    使用zsh作为默认终端
find . -name '*.py' |xargs grep test
    在当前目录中找到所有.py文件，通过xargs将标准输入转成参数，传递给grep搜索含有固定字符串'test'的文件。
grep -o 'haha' file | wc -l
    统计 haha 在文件 file 中总共出现的次数
iotop
    使用 iotop 从进程纬度查看磁盘 IO 负载
iostat -d -k 2  # -d 显示设备（磁盘）使用状态。 # -k 让某些使用 block 为单位的列强制使用 kB 为单位。 # 2 数据显示每隔2秒刷新一次。
    使用 iostat 从系统纬度查看磁盘 IO 负载
In .zshrc alias pmr="python manage.py runserver"
    添加自定义命令
解压多个卷: 例如 linux.zip.001, linux.zip.002, linux.zip.003。
    1、cat linux.zip* > linux.zip  # 合并为一个zip包。
    2、unzip linux.zip  # 解压zip包。
ls | tee ./test.log
    Linux 同时输出所有信息到控制台和文件
----------
在Linux使用grep命令，从文件中抓取显示特定的信息，如下:
    cat 文件名 | grep 特定条件 --->   cat xxxx | grep 12345
结果报错：Binary file (standard input) matches；经过查询后，意思为文件是二进制文件，不能直接grep，解决办法:
    cat 文件名 | grep -a 特定条件 ---> cat xxxx | grep -an 12345  # -n,--line-number 输出的同时显示行号
----------
assigning value to shell variable using a function return value from Python
.py
    def fooPy():
        return "some string"

fooPy()
.sh
    fooShell=$(python fooPy.py)
----------
tar:
Usage:
  List:    tar -tf <archive-filename>
  Extract: tar -xf <archive-filename>
  Create:  tar -cf <archive-filename> [filenames...]
  Help:    tar --help
----------
用sed -i对文本字符串进行增删改查

# 对每行匹配到的第一个字符串进行替换
sed -i 's/原字符串/新字符串/' ab.txt 

# 对全局匹配上的所有字符串进行替换
sed -i 's/原字符串/新字符串/g' ab.txt 

# 删除所有匹配到字符串的行
sed -i '/匹配字符串/d'  ab.txt  

# 特定字符串的行后插入新行
sed -i '/特定字符串/a 新行字符串' ab.txt 

# 特定字符串的行前插入新行
sed -i '/特定字符串/i 新行字符串' ab.txt

# 把匹配行中的某个字符串替换为目标字符串
sed -i '/匹配字符串/s/源字符串/目标字符串/g' ab.txt

# 在文件ab.txt中的末行之后，添加bye
sed -i '$a bye' ab.txt   

# 对于文件第3行，把匹配上的所有字符串进行替换
sed -i '3s/原字符串/新字符串/g' ab.txt
----------