# -*- coding:utf-8 -*-
import happybase
connection = happybase.Connection(host='192.168.3.83', port=9090)
table = connection.table('alert_record')

# data:
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:38:51', {'B:a01': '\x01\x00\x00\x00\x01\x01\x92\xbb(\xa1\x01\x96\r\xc3\xb7\x01\x04\xcd\xa6\xdb\x00', 'B:a02': '2018-08-16 15:38:51', 'B:a03': '2018-08-16 15:38:51', 'A:b04': '', 'A:b05': '', 'A:b06': 'cleared', 'A:b07': '1', 'A:b01': '3', 'A:b02': 'alert', 'A:b03': 'temperature_difference_alert', 'A:a06': 'AAABBBCCC', 'A:a05': '2018-08-16 15:38:51', 'A:a04': '2018-08-16 15:38:51', 'A:b08': '2018-08-16 15:39:57', 'A:a02': '0000000001', 'A:a01': 'LGHB2V190FC200001', 'A:c05': '114.431665', 'A:c04': '24.892472', 'A:c06': '', 'A:c01': '24.892472', 'A:c03': '', 'A:c02': '114.431665', 'A:d02': 'unreported', 'A:d01': 'unhandled', 'A:a03': '2018-08-16 15:38:51', 'A:e03': '', 'A:e02': '1', 'A:e01': '1', 'A:e04': ''})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:40:33', {'B:a01': '\x03\x00\x00\x00\x01\x02\x0c\xfe>\x87H:\xc4\xb1\x01\x0f\xc8\xdeB\x01\xaf\x8f?\xb0\x01\xe4\x19\xcf\x1b', 'B:a02': '2018-08-16 15:40:33', 'B:a03': '2018-08-16 15:40:33', 'A:b04': '', 'A:b05': '', 'A:b06': 'cleared', 'A:b07': '1', 'A:b01': '3', 'A:b02': 'alert', 'A:b03': 'temperature_difference_alert', 'A:a06': 'AAABBBCCC', 'A:a05': '2018-08-16 15:40:33', 'A:a04': '2018-08-16 15:40:33', 'A:b08': '2018-08-16 15:40:41', 'A:a02': '0000000001', 'A:a01': 'LGHB2V190FC200001', 'A:c05': '107.819102', 'A:c04': '27.514533', 'A:c06': '', 'A:c01': '27.514533', 'A:c03': '', 'A:c02': '107.819102', 'A:d02': 'unreported', 'A:d01': 'unhandled', 'A:a03': '2018-08-16 15:40:33', 'A:e03': '', 'A:e02': '1', 'A:e01': '1', 'A:e04': '2'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:41:02', {'B:a01': '\x03\x00\x00\x00\x01\x01\xd8-%;\x02\xb0\x18\x0b]r\xff\xb1\x1a\x02\x16\xbd\x14\xd0\xe4-\x1cu\x01\x7f\x0b\xf8\xb5', 'B:a02': '2018-08-16 15:41:02', 'B:a03': '2018-08-16 15:41:02', 'A:b04': '', 'A:b05': '', 'A:b06': 'cleared', 'A:b07': '1', 'A:b01': '3', 'A:b02': 'alert', 'A:b03': 'temperature_difference_alert', 'A:a06': 'AAABBBCCC', 'A:a05': '2018-08-16 15:41:02', 'A:a04': '2018-08-16 15:41:02', 'A:b08': '2018-08-16 15:41:49', 'A:a02': '0000000001', 'A:a01': 'LGHB2V190FC200001', 'A:c05': '103.833428', 'A:c04': '39.413317', 'A:c06': '', 'A:c01': '39.413317', 'A:c03': '', 'A:c02': '103.833428', 'A:d02': 'unreported', 'A:d01': 'unhandled', 'A:a03': '2018-08-16 15:41:02', 'A:e03': '', 'A:e02': '1', 'A:e01': '1', 'A:e04': '2'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:42:45', {'B:a01': '\x03\x00\x00\x00\x01\x00\x02\xb4\xed\x06:\xb5\xbf\x80\x08\x01{\x87\xb6\xdf\x02\x12!\x80\x1fZ\t\xc9\x17', 'B:a02': '2018-08-16 15:42:45', 'B:a03': '2018-08-16 15:42:45', 'A:b04': '', 'A:b05': '', 'A:b06': 'alerting', 'A:b07': '1', 'A:b01': '3', 'A:b02': 'alert', 'A:b03': 'temperature_difference_alert', 'A:a06': 'AAABBBCCC', 'A:a05': '2018-08-16 15:42:45', 'A:a04': '2018-08-16 15:42:45', 'A:a03': '2018-08-16 15:42:45', 'A:a02': '0000000001', 'A:a01': 'LGHB2V190FC200001', 'A:c05': '109.135488', 'A:c04': '33.808162', 'A:c06': '', 'A:c01': '33.808162', 'A:c03': '', 'A:c02': '109.135488', 'A:d02': 'unreported', 'A:d01': 'unhandled', 'A:e03': '', 'A:e02': '1', 'A:e01': '1', 'A:e04': '2'})
# ('LGHB2V190FC200001__0000000002__2018-08-16 15:42:12', {'B:a01': '\x02\x00\x00\x00\x02\x01\x95x\xf0\x01\x01uyn[\x02\xd7zUS\x7f{Ms\x01)\xa2\xde\xc5', 'B:a02': '2018-08-16 15:42:12', 'B:a03': '2018-08-16 15:42:12', 'A:b04': '', 'A:b05': '', 'A:b06': 'cleared', 'A:b07': '1', 'A:b01': '3', 'A:b02': 'alert', 'A:b03': 'battery_high_temperature_alert', 'A:a06': 'AAABBBCCC', 'A:a05': '2018-08-16 15:42:12', 'A:a04': '2018-08-16 15:42:12', 'A:b08': '2018-08-16 15:42:45', 'A:a02': '0000000002', 'A:a01': 'LGHB2V190FC200001', 'A:c05': '105.3542', 'A:c04': '27.581448', 'A:c06': '', 'A:c01': '27.581448', 'A:c03': '', 'A:c02': '105.3542', 'A:d02': 'unreported', 'A:d01': 'unhandled', 'A:a03': '2018-08-16 15:42:12', 'A:e03': '', 'A:e02': '1', 'A:e01': '1', 'A:e04': ''})


# ColumnPrefixFilter(column_prefix) 返回满足指定前缀的列的键值对
# e.g: A:a02
# return:
# ('LGHB2V190FC200001__0000000002__2018-08-16 15:42:12', {'B:a02': '2018-08-16 15:42:12', 'A:a02': '0000000002'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:42:45', {'B:a02': '2018-08-16 15:42:45', 'A:a02': '0000000001'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:41:02', {'B:a02': '2018-08-16 15:41:02', 'A:a02': '0000000001'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:40:33', {'B:a02': '2018-08-16 15:40:33', 'A:a02': '0000000001'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:38:51', {'B:a02': '2018-08-16 15:38:51', 'A:a02': '0000000001'})
data = table.scan(filter="ColumnPrefixFilter('a02')")

# TimestampsFilter(a, b) 返回指定时间戳的数据
data = table.scan(filter="TimestampsFilter(1499150787875, 1499150787913)")

# PageFilter(page_size) 返回page_size条数据
data = table.scan(filter="PageFilter(1)")

# MultipleColumnPrefixFilter(column_prefix1, column_prefix2)
# return:
# ('LGHB2V190FC200001__0000000002__2018-08-16 15:42:12', {'A:a05': '2018-08-16 15:42:12', 'A:a02': '0000000002', 'B:a02': '2018-08-16 15:42:12'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:42:45', {'A:a05': '2018-08-16 15:42:45', 'A:a02': '0000000001', 'B:a02': '2018-08-16 15:42:45'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:41:02', {'A:a05': '2018-08-16 15:41:02', 'A:a02': '0000000001', 'B:a02': '2018-08-16 15:41:02'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:40:33', {'A:a05': '2018-08-16 15:40:33', 'A:a02': '0000000001', 'B:a02': '2018-08-16 15:40:33'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:38:51', {'A:a05': '2018-08-16 15:38:51', 'A:a02': '0000000001', 'B:a02': '2018-08-16 15:38:51'})
data = table.scan(filter="MultipleColumnPrefixFilter('a02','a05')")

# FamilyFilter() 根据列族过滤，返回满足指定列族的列的数据
data = table.scan(filter="FamilyFilter(=,'substring:B')")
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:38:51', {'B:a01': '\x01\x00\x00\x00\x01\x01\x92\xbb(\xa1\x01\x96\r\xc3\xb7\x01\x04\xcd\xa6\xdb\x00', 'B:a02': '2018-08-16 15:38:51', 'B:a03': '2018-08-16 15:38:51'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:40:33', {'B:a01': '\x03\x00\x00\x00\x01\x02\x0c\xfe>\x87H:\xc4\xb1\x01\x0f\xc8\xdeB\x01\xaf\x8f?\xb0\x01\xe4\x19\xcf\x1b', 'B:a02': '2018-08-16 15:40:33', 'B:a03': '2018-08-16 15:40:33'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:41:02', {'B:a01': '\x03\x00\x00\x00\x01\x01\xd8-%;\x02\xb0\x18\x0b]r\xff\xb1\x1a\x02\x16\xbd\x14\xd0\xe4-\x1cu\x01\x7f\x0b\xf8\xb5', 'B:a02': '2018-08-16 15:41:02', 'B:a03': '2018-08-16 15:41:02'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:42:45', {'B:a01': '\x03\x00\x00\x00\x01\x00\x02\xb4\xed\x06:\xb5\xbf\x80\x08\x01{\x87\xb6\xdf\x02\x12!\x80\x1fZ\t\xc9\x17', 'B:a02': '2018-08-16 15:42:45', 'B:a03': '2018-08-16 15:42:45'})
# ('LGHB2V190FC200001__0000000002__2018-08-16 15:42:12', {'B:a01': '\x02\x00\x00\x00\x02\x01\x95x\xf0\x01\x01uyn[\x02\xd7zUS\x7f{Ms\x01)\xa2\xde\xc5', 'B:a02': '2018-08-16 15:42:12', 'B:a03': '2018-08-16 15:42:12'})

# ColumnPaginationFilter(limit, offset) 根据limit和offset得到数据
data = table.scan(filter="ColumnPaginationFilter(1, 0)")
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:38:51', {'A:a01': 'LGHB2V190FC200001'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:40:33', {'A:a01': 'LGHB2V190FC200001'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:41:02', {'A:a01': 'LGHB2V190FC200001'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:42:45', {'A:a01': 'LGHB2V190FC200001'})
# ('LGHB2V190FC200001__0000000002__2018-08-16 15:42:12', {'A:a01': 'LGHB2V190FC200001'})
data = table.scan(filter="ColumnPaginationFilter(1, 1)")
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:38:51', {'A:a02': '0000000001'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:40:33', {'A:a02': '0000000001'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:41:02', {'A:a02': '0000000001'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:42:45', {'A:a02': '0000000001'})
# ('LGHB2V190FC200001__0000000002__2018-08-16 15:42:12', {'A:a02': '0000000002'})
data = table.scan(filter="ColumnPaginationFilter(2, 1)")
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:38:51', {'A:a03': '2018-08-16 15:38:51', 'A:a02': '0000000001'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:40:33', {'A:a03': '2018-08-16 15:40:33', 'A:a02': '0000000001'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:41:02', {'A:a03': '2018-08-16 15:41:02', 'A:a02': '0000000001'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:42:45', {'A:a03': '2018-08-16 15:42:45', 'A:a02': '0000000001'})
# ('LGHB2V190FC200001__0000000002__2018-08-16 15:42:12', {'A:a03': '2018-08-16 15:42:12', 'A:a02': '0000000002'})

# SingleColumnValueFilter(family, qualifier, compare_operator, comparator, filterIfColumnMissing_boolean, latest_version_boolean)
data = table.scan(filter="SingleColumnValueFilter('A', 'a01', =, 'regexstring:LGHB2V190FC200001')")

# RowFilter(compare_operator, comparator) 根据rowkey的值过滤
data = table.scan(filter="RowFilter(=, 'regexstring:LGHB2V190FC200001__0000000001__2018-08-16 15:42:45')")

# QualifierFilter(compare_operator, comparator) 根据列名过滤
data = table.scan(filter="QualifierFilter(=, 'regexstring:d')")
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:38:51', {'A:d02': 'unreported', 'A:d01': 'unhandled'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:40:33', {'A:d02': 'unreported', 'A:d01': 'unhandled'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:41:02', {'A:d02': 'unreported', 'A:d01': 'unhandled'})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:42:45', {'A:d02': 'unreported', 'A:d01': 'unhandled'})
# ('LGHB2V190FC200001__0000000002__2018-08-16 15:42:12', {'A:d02': 'unreported', 'A:d01': 'unhandled'})

# ColumnRangeFilter

# ValueFilter(compare_operator, comparator) 根据值过滤，只返回匹配的列
data = table.scan(filter="ValueFilter(=, 'regexstring:LGHB2V190FC200001')")
#('LGHB2V190FC200001__0000000001__2018-08-16 15:38:51', {'A:a01': 'LGHB2V190FC200001'})
#('LGHB2V190FC200001__0000000001__2018-08-16 15:40:33', {'A:a01': 'LGHB2V190FC200001'})
#('LGHB2V190FC200001__0000000001__2018-08-16 15:41:02', {'A:a01': 'LGHB2V190FC200001'})
#('LGHB2V190FC200001__0000000001__2018-08-16 15:42:45', {'A:a01': 'LGHB2V190FC200001'})
#('LGHB2V190FC200001__0000000002__2018-08-16 15:42:12', {'A:a01': 'LGHB2V190FC200001'}

# PrefixFilter 根据行的前缀过滤行(好像是过滤的row key)
data = table.scan(filter="PrefixFilter('LGHB2V190FC200001')")

# SingleColumnValueExcludeFilter

# ColumnCountGetFilter(n) 返回多少列
data = table.scan(filter="ColumnCountGetFilter(1)")
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:38:51', {'A:a01': 'LGHB2V190FC200001'})
data = table.scan(filter="ColumnCountGetFilter(2)")
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:38:51', {'A:a02': '0000000001', 'A:a01': 'LGHB2V190FC200001'})

# InclusiveStopFilter(row_key) 设置停止的行(好像是row key)
data = table.scan(filter="InclusiveStopFilter('LGHB2V190FC200001__0000000001__2018-08-16 15:40:33')")

# DependentColumnFilter(family, qualifier) # 选出包含指定列的行
data = table.scan(filter="DependentColumnFilter('A', 'c01')")

# FirstKeyOnlyFilter 返回的结果每行只有第一列
data = table.scan(filter="FirstKeyOnlyFilter()")

# KeyOnlyFilter 返回所有的列名
data = table.scan(filter=None)
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:38:51', {'B:a01': '', 'B:a02': '', 'B:a03': '', 'A:b04': '', 'A:b05': '', 'A:b06': '', 'A:b07': '', 'A:b01': '', 'A:b02': '', 'A:b03': '', 'A:a06': '', 'A:a05': '', 'A:a04': '', 'A:b08': '', 'A:a02': '', 'A:a01': '', 'A:c05': '', 'A:c04': '', 'A:c06': '', 'A:c01': '', 'A:c03': '', 'A:c02': '', 'A:d02': '', 'A:d01': '', 'A:a03': '', 'A:e03': '', 'A:e02': '', 'A:e01': '', 'A:e04': ''})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:40:33', {'B:a01': '', 'B:a02': '', 'B:a03': '', 'A:b04': '', 'A:b05': '', 'A:b06': '', 'A:b07': '', 'A:b01': '', 'A:b02': '', 'A:b03': '', 'A:a06': '', 'A:a05': '', 'A:a04': '', 'A:b08': '', 'A:a02': '', 'A:a01': '', 'A:c05': '', 'A:c04': '', 'A:c06': '', 'A:c01': '', 'A:c03': '', 'A:c02': '', 'A:d02': '', 'A:d01': '', 'A:a03': '', 'A:e03': '', 'A:e02': '', 'A:e01': '', 'A:e04': ''})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:41:02', {'B:a01': '', 'B:a02': '', 'B:a03': '', 'A:b04': '', 'A:b05': '', 'A:b06': '', 'A:b07': '', 'A:b01': '', 'A:b02': '', 'A:b03': '', 'A:a06': '', 'A:a05': '', 'A:a04': '', 'A:b08': '', 'A:a02': '', 'A:a01': '', 'A:c05': '', 'A:c04': '', 'A:c06': '', 'A:c01': '', 'A:c03': '', 'A:c02': '', 'A:d02': '', 'A:d01': '', 'A:a03': '', 'A:e03': '', 'A:e02': '', 'A:e01': '', 'A:e04': ''})
# ('LGHB2V190FC200001__0000000001__2018-08-16 15:42:45', {'B:a01': '', 'B:a02': '', 'B:a03': '', 'A:b04': '', 'A:b05': '', 'A:b06': '', 'A:b07': '', 'A:b01': '', 'A:b02': '', 'A:b03': '', 'A:a06': '', 'A:a05': '', 'A:a04': '', 'A:a03': '', 'A:a02': '', 'A:a01': '', 'A:c05': '', 'A:c04': '', 'A:c06': '', 'A:c01': '', 'A:c03': '', 'A:c02': '', 'A:d02': '', 'A:d01': '', 'A:e03': '', 'A:e02': '', 'A:e01': '', 'A:e04': ''})
# ('LGHB2V190FC200001__0000000002__2018-08-16 15:42:12', {'B:a01': '', 'B:a02': '', 'B:a03': '', 'A:b04': '', 'A:b05': '', 'A:b06': '', 'A:b07': '', 'A:b01': '', 'A:b02': '', 'A:b03': '', 'A:a06': '', 'A:a05': '', 'A:a04': '', 'A:b08': '', 'A:a02': '', 'A:a01': '', 'A:c05': '', 'A:c04': '', 'A:c06': '', 'A:c01': '', 'A:c03': '', 'A:c02': '', 'A:d02': '', 'A:d01': '', 'A:a03': '', 'A:e03': '', 'A:e02': '', 'A:e01': '', 'A:e04': ''})


for i in data:
    print i
