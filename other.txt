----------
cloc: 统计代码行数
----------
screen -ls 列出screen
screen -S name 新建screen
screen -r name 登入screen
ctrl a + c 新建tab
ctrl a + d 从当前screen返回
不进入screen删除: screen -S session_name -X quit
进入screen输入exit删除
ctrl a + n & p next & prev: 切换上一个下一个tab
----------
git commit规范:
    <type>(<scope>): <subject>
    <BLANK LINE>
    <body>
    <BLANK LINE>
    <footer>

占位标签解析:
    type: 代表某次提交的类型，比如是修复一个bug还是增加一个新的feature。所有的type类型如下:
        feat[特性]: 新增feature
        fix[修复]: 修复bug
        docs[文档]: 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等
        style[格式]: 仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑
        refactor[重构]: 代码重构，没有加新功能或者修复bug
        perf[优化]: 优化相关，比如提升性能、体验
        test[测试]: 测试用例，包括单元测试、集成测试等
        chore[工具]: 改变构建流程、或者增加依赖库、工具等
        revert[回滚]: 回滚到上一个版本
    scope: scope说明commit影响的范围。scope依据项目而定，例如在业务项目中可以依据菜单或者功能模块划分，如果是组件库开发，则可以依据组件划分。
    subject: 是commit的简短描述。
    body: 提交代码的详细描述，可以省略。
    footer: 如果代码的提交是不兼容变更(breaking change)或关闭缺陷(issue)，则Footer必需，否则可以省略。

示例:
    特性: 添加头像功能
    特性: 添加收藏功能
    修复: 在android机器上传崩溃问题解决
    文档: 修改README,增加了使用说明
    优化: 首页图片加载缓慢优化
    重构: 对头像功能进行封装重构
----------
git 切换分支
    1、首先切换到dev分支上
        git checkout dev
    2、如果是多人开发的话 需要把远程dev上的代码pull下来
        git pull upstream dev
    3、然后我们把some_branch分支的代码合并到dev上
        git merge some_branch

git diff HEAD HEAD~1: 查看上一次提交的改动
git push origin -d somebranch 删除远程分支

git 通过 comment 关键字查找commit: git log --grep=keyword; git log --grep "#12"
git log --author "shfshanyue"     # 查看 shfshanyue 的提交
git log -S "setTimeout"           # 查看提交的代码中包含 setTimeout 关键字的提交

git 查看某次commit内容: git show commitID
当我想从远程仓库里拉取一条本地不存在的分支时：
    git fetch upstream
    git checkout -b 本地分支名 upstream/远程分支名
这个将会自动创建一个新的本地分支，并与指定的远程分支关联起来。

创建远程分支并把本地分支推到远程分支:
    git push upstream 本地分支名:远程分支名
删除远程分支:
    git push upstream -d 远程分支名

Git revert到某一个commit:

# Revert to the specific revision using git reset
::
    Here we first hard reset the state of the repository to some previous revision and then soft reset back to current state.
    The soft reset will keep file modifications, so it will bring old state back on top of the current state:
        # Careful, reset --hard will remove non-commited changes
        **$ git reset --hard 0682c06**  # Use the SHA1 of the revision you want to revert to
        HEAD is now at 0682c06 G3
        **$ git reset --soft HEAD@{1}**
        **$ git commit -m "Reverting to the state of the project at 0682c06"**

# Revert to the specific revision using git read-tree
::
    **git read-tree -um @ 0682c06**  # Use the SHA1 of the revision you want to revert to
    **git commit -m "Reverting to the state of the project at 0682c06"**
    The -m option instructs read-tree to merge the specified state and -u will update work tree with the results of the merge.
----------
vscode:
    ctrl+z undo { "key": "cmd+y", "command": "redo", "when": "editorTextFocus" }
    插件: Paste and Indent, One Dark Pro, Python, vscode-icons
{
    "workbench.iconTheme": "vscode-icons",
    "workbench.startupEditor": "newUntitledFile",
    "vsicons.dontShowNewVersionMessage": true,
    "editor.fontSize": 14,
    "workbench.colorTheme": "One Dark Pro",
    "python.linting.pylintArgs": [
        "--load-plugins",
    ],
    "workbench.activityBar.visible": true,
    "python.linting.flake8Enabled": true,
    "python.formatting.provider": "autopep8",
    "pasteAndIndent.selectAfter": true,
}
----------
zsh: alias | grep git 查看git简写
----------
python -m SimpleHTTPServer [port]  # 当前目录开启一个小的文件服务器, 默认端口8000
# 另外，python 3,中是 python -m http.server
----------
python -m this               # python's Zen
python -m calendar           # 显示一个日历
echo '{"json":"obj"}' | python -mjson.tool  # 漂亮地格式化打印json数据
echo '{"json":"obj"}' | python -mjson.tool | pygmentize -l json # 高亮地打印json格式化
python -m antigravity       # 这个该自己试试
----------
git本地没有远程某个分支
    git branch -va: 查看本地和远程分支
    git checkout -t upstream/test: 能够直接新建本地分支，将远程分支提取出来。
----------
组合模式(Composite Pattern)：组合多个对象形成树形结构以表示具有“整体—部分”关系的层次结构。
----------
git 提交一个空目录: 这种情况下只需要在目录下创建.gitkeep文件，然后在项目的.gitignore中设置不忽略.gitkeep。
----------
mysql中用 <> 与 != 都是可以的，但sqlserver中不识别 != ,所以建议用 <> 。
mysql truncate table 表名; 清除表的数据。
----------
#http协议版本
http1.0：当前浏览器客户端与服务器端建立连接之后，只能发送一次请求，一次请求之后连接关闭。
http1.1：默认使用长连接，当前浏览器客户端与服务器端建立连接之后，可以在一次连接中发送多次请求。（基本都使用1.1）
----------
#请求资源
URL： 统一资源定位符。http://localhost:8080/WebRoot/hello。只能定位互联网资源。是URI 的子集。URL=协议+主机端口+URI
URI： 统一资源标记符。/WebRoot/hello。用于标记任何资源。可以是本地文件系统、局域网的资源、可以是互联网资源。
----------
redis zadd(name, key, score): 有序集合，和集合都是成员是唯一的。zrangebyscore(name, min, max): 返回score在min和max之间的key。
redis hmget(name, keys): 获取给定keys的值，key的顺序对应值顺序。
----------
Renaming a virtualenv folder without breaking it:
    1. cpvirtualenv oldenv newenv
    2. rmvirtualenv oldenv
----------
Mac窗口工具: spectacleapp
----------
docker cp
cp Copy files/folders between a container and the local filesystem
在容器和本地文件系统之间复制文件/文件夹

Usage:  docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-
从容器中复制文件或目录到执行命令所在机器的指定路径
        docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH
从执行命令所在的机器复制文件或目录到容器内部的指定路径
|-: 使用复制文件的文件名
----------
scp 从本地复制到远程
    scp local_file remote_username@remote_ip:remote_folder
从远程复制到本地，只要将从本地复制到远程的命令的后2个参数调换顺序即可
----------
mysql 创建数据库名字带-的情况: `dbname`
----------
分布式文件系统
::
    在信息爆炸时代，单纯通过增加硬盘个数来扩展计算机文件系统的存储容量的方式，在容量大小、容量增长速度、数据备份、数据安全等方面的表现都差强人意。分布式文件系统可以有效解决数据的存储和管理难题：将固定于某个地点的某个文件系统，扩展到任意多个地点/多个文件系统，众多的节点组成一个文件系统网络。每个节点可以分布在不同的地点，通过网络进行节点间的通信和数据传输。人们在使用分布式文件系统时，无需关心数据是存储在哪个节点上、或者是从哪个节点从获取的，只需要像使用本地文件系统一样管理和存储文件系统中的数据。
----------
export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh
export PYTHONPATH=.
export PATH=$PATH:$(go env GOPATH)/bin
export GOPATH=$(go env GOPATH)
alias pmma="python manage.py makemigrations"
alias pmm="python manage.py migrate"
alias pmr="python manage.py runserver"
alias pms="python manage.py shell_plus"
alias cf="cd ~/b/Dfjk4Finance"
alias cn="cd ~/b/Dfjk4NewEnergy"
alias cj="cd ~/b/Jing5Web"
alias cg="cd ~/b/Guo6Web"
alias cz="cd ~/b/Zheng6Web"
alias cb="cd ~/b/Burnish6Web"
read temp
case $temp in
  b|dfjk)
    workon $temp
  ;;
  '')
    workon dfjk
  ;;
esac
----------
提高性能最怕是没有方向，没有头绪的时候不妨试试三件套：并行、异步、加缓存。
----------
A Redis server, by default, is configured with 16 (0..15) shared databases.
----------
在物理上 HBase 是按 column family 存储的，只是按照 Row-key 将相关 CF 中的列关联起来。
----------
1. 通过设置StartRow和StopRow替换PrefixFilter
2. 当SingleColumnValueFilter设置filterIfMissing为true时，和其他Filter组合成FilterList时，可能导致返回结果不正确。不要使用SingleColumnValueFilter和其他Filter组合成FilterList。尽量通过ValueFilter来替换掉SingleColumnValueFilter。
----------
Phoenix: put the SQL back in NoSQL 是构建在HBase上的一个SQL层，能让我们用标准的JDBC APIs而不是HBase客户端APIs来创建表，插入数据和对HBase数据进行查询。
----------
**Serverless** 圈内俗称为“无服务器架构”，所谓“无服务器”，并不是说基于 Serverless 架构的软件应用不需要服务器就可以运行，其指的是用户无须关心软件应用运行涉及的底层服务器的状态、资源（比如 CPU、内存、磁盘及网络）及数量。软件应用正常运行所需要的计算资源由底层的云计算平台动态提供。
Serverless的技术特点:
1.按需加载
在 Serverless 架构下，应用的加载（load）和卸载（unload）由 Serverless 云计算平台控制。这意味着应用不总是一直在线的。只有当有请求到达或者有事件发生时才会被部署和启动。当应用空闲至一定时长时，应用会到达或者有事件发生时才会被部署和启动。当应用空闲至一定时长时，应用会被自动停止和卸载。因此应用并不会持续在线，不会持续占用计算资源。

2.事件驱动
应用的加载和执行由事件驱动，比如HTTP请求到达、消息队列接收到新的信息或存储服务的文件被修改了等。通过将不同事件来源（Event Source）的事件（Event）与特定的函数进行关联，实现对不同事件采取不同的反应动作，这样可以非常容易地实现事件驱动（Event Driven）架构。

3.状态非本地持久化
云计算平台自动控制应用实例的加载和卸载，且应用和服务器完全解耦，应用不再与特定的服务器关联。因此应用的状态不能，也不会保存在其运行的服务器之上，不能做到传统意义上的状态本地持久化。

4.非会话保持
应用不再与特定的服务器关联。每次处理请求的应用实例可能是相同服务器上的应用实例，也可能是新生成的服务器上的应用实例。因此，用户无法保证同一客户端的两次请求由同一个服务器上的同一个应用实例来处理。也就是说，无法做到传统意义上的会话保持（Sticky Session）。因此，Serverless架构更适合无状态的应用。

5.自动弹性伸缩
Serverless 应用原生可以支持高可用，可以应对突发的高访问量。应用实例数量根据实际的访问量由云计算平台进行弹性的自动扩展或收缩，云计算平台动态地保证有足够的计算资源和足够数量的应用实例对请求进行处理。

6.应用函数化
每一个调用完成一个业务动作，应用会被分解成多个细颗粒度的操作。由于状态无法本地持久化，这些细颗粒度的操作是无状态的，类似于传统编程里无状态的函数。Serverless 架构下的应用会被函数化，但不能说 Serverless 就是 Function as a Service（FaaS）。Serverless 涵盖了 FaaS 的一些特性，可以说 FaaS 是 Serverless 架构实现的一个重要手段。
----------
redis 是单线程！通常请求都会很快处理完，但是当我们使用HGETALL大量的时候，必须遍历每个字段来获取数据，这期间消耗的CPU资源和字段数成正比，如果还用了PIPELINING，无疑更是雪上加霜。
----------
数据库中，当两个表建立一对多关系的时候,"一"的那一端是**父表**,"多"的那一端是**子表**。
----------
幂等性:就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的,不会因为多次点击而产生了副作用.
----------
YAML: 锚点&
    defaults: &defaults
      adapter:  postgres
      host:     localhost
    development:
      database: myapp_development
      <<: *defaults
等同于：
    defaults:
      adapter:  postgres
      host:     localhost
    development:
      database: myapp_development
      adapter:  postgres
      host:     localhost
&用来建立锚点（defaults），<< 表示合并到当前数据，*用来引用锚点。

YAML: 别名*
    - &showell Steve
    - Clark
    - Brian
    - *showell
转为 JavaScript 代码如下:
    ['Steve', 'Clark', 'Brian', 'Steve']

sammy:
  - &SAMMY1
    name: vin
    paramType: query
    required: true
    type: string
    description: 车辆vin码
  - &SAMMY2
    public/javascripts/vendor/sammy*.js

mobile:
  - *SAMMY1
  - *SAMMY2
  - public/javascripts/something_else.js
----------
任务队列与消息队列都是由队列实现的异步协议，只是消息队列(Message Queue) 用来做异步通信，而任务队列(Task Queue) 更强调异步执行的任务。实际上发送消息也是一个任务，也就是说任务队列是在消息队列之上的管理工作，任务队列的很多典型应用就是发送消息，如发送邮件，发送短信，发送消息推送等。
Broker: 消息中间件，任务消息存进队列，再按序发送给消费者