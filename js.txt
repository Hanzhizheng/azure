stringObject.split(separator, howmany): 如果把空字符串 ("") 用作 separator，那么 stringObject 中的每个字符之间都会被分割。

<script type="text/javascript">
// slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分, 
// stringObject.slice(start,end)
// 在本例中，我们将提取从位置 6 开始的所有字符
var str="Hello happy world!"
document.write(str.slice(6))
</script>

Event.target
    在HTML文档中，我们为<p>元素绑定点击事件("click")，由于DOM元素的事件冒泡机制，我们点击<p>元素内的一个<span>元素就可以触发<p>元素上绑定的click事件。target属性就用于返回最初触发事件的DOM元素，也就是本例中的<span>元素。(currentTarget属性始终返回的都是该<p>元素)。

----------
元素上监听事件被触发时: 
    函数不传参数时，默认第一个参数时event
    如果传入参数时，函数中有一个对象叫arguments，用于保存参数列表，传入一个参数时，该参数就保存在arguments[0]处，当函数被触发时，arguments[0]就被替换成了事件对象event了。
    document.onClick，是一种内部api，既然是api，就得按照api规范来用它，如：规范里面就是，在element被click的时候，这个api的所定义的回调函数会被调用，并且传入第一个参数是event对象。
<div id="app">
  <p v-on:click="greet"><button>Greet</button></p>
</div>

<script>
var app = new Vue({
  el: '#app',
  data: {
    name: 'Vue.js'
  },
  methods: {
    // greet: function (event, a=1) {
    greet: function (a=1) {  // event作为默认参数传入
      alert('Hello ' + this.name + '!')
	  if (event) {
		  alert(event.target.tagName)
	  }
    }
  }
})
</script>
----------
大部份企业用户最佳方案是公众号+小程序，同时运营。这样就可以把二者的长处充份发挥了。公众号进行信息传达和粉丝沉淀，小程序提供必要的功能服务支持，这样即可达到最佳的用户体验。
----------
单页面的意思是结构，样式，逻辑代码都写在同一个文件中，当我们引入这个文件后，就相当于引入对应的结构、样式和JS代码。
----------
JavaScript中的表达式和语句是有区别的.一个表达式会产生一个值,它可以放在任何需要一个值的地方,比如,作为一个函数调用的参数.下面的每行代码都是一个表达式:
    myvar
    3 + x
    myfunc("a", "b")
语句可以理解成一个行为.循环语句和if语句就是典型的语句.一个程序是由一系列语句组成的.JavaScript中某些需要语句的地方,你可以使用一个表达式来代替.这样的语句称之为表达式语句.但反过来不可以:你不能在一个需要表达式的地方放一个语句.比如,一个if语句不能作为一个函数的参数.
----------
vue computed vs methods:
    计算属性是基于它们的依赖进行缓存的, 多次访问计算属性会立即返回之前的计算结果，而不是再次执行函数；
    相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。
    我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性A，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于A 。如果没有缓存，我们将不可避免的多次执行A的getter！如果你不希望有缓存，请用方法来替代。
----------
计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：

// ...
computed: {
  fullName: {
    // getter
    get: function () {
      return this.firstName + ' ' + this.lastName
    },
    // setter
    set: function (newValue) {
      var names = newValue.split(' ')
      this.firstName = names[0]
      this.lastName = names[names.length - 1]  // js不支持names[-1]
    }
  }
}
// ...
----------
https://www.cnblogs.com/tim100/p/7262963.html
当我们在使用v-for进行渲染时，尽可能使用渲染元素自身属性的id给渲染的元素绑定一个key值。
----------
使用了v-if的时候，如果值为false，那么页面将不会有这个html标签生成。
v-show则是不管值为true还是false，html元素都会存在，只是CSS中的display显示或隐藏。
----------
“Mustache”语法 (双大括号) {{value}}
----------
箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或 new.target。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数
    var elements = [
      'Hydrogen',
      'Helium',
      'Lithium',
      'Beryllium'
    ];

    elements.map(function(element) {
      return element.length;
    }); // 返回数组：[8, 6, 7, 9]

    // 上面的普通函数可以改写成如下的箭头函数
    elements.map((element) => {
      return element.length;
    }); // [8, 6, 7, 9]

    // 当箭头函数只有一个参数时，可以省略参数的圆括号
    elements.map(element => {
     return element.length;
    }); // [8, 6, 7, 9]

    // 当箭头函数的函数体只有一个 `return` 语句时，可以省略 `return` 关键字和方法体的花括号
    elements.map(element => element.length); // [8, 6, 7, 9]

    // 在这个例子中，因为我们只需要 `length` 属性，所以可以使用参数解构
    // 需要注意的是字符串 `"length"` 是我们想要获得的属性的名称，而 `lengthFooBArX` 则只是个变量名，
    // 可以替换成任意合法的变量名
    elements.map(({ "length": lengthFooBArX }) => lengthFooBArX); // [8, 6, 7, 9]
----------
一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，v-bind 指令可以用于响应式地更新 HTML 特性：

<a v-bind:href="url">...</a>
在这里 href 是参数，告知 v-bind 指令将该元素的 href 特性与表达式 url 的值绑定。

另一个例子是 v-on 指令，它用于监听 DOM 事件：

<a v-on:click="doSomething">...</a>
在这里参数是监听的事件名。我们也会更详细地讨论事件处理。
----------
关于javascript的构成，大致可归结为三个部分：ECMAScript，DOM和BOM。

1.ECMAScript是对js的约束和规范，如基本语法结构；

2.DOM就是文档对象模型，是交互的资源，如html文档；

3.BOM主要是对浏览器本身描述，如浏览器名称，版本号等；
----------
ECMAScript模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。
使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。
    import { lastName as surname } from './profile.js';
    除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。
        import * as circle from './circle';

        console.log('圆面积：' + circle.area(4));
        console.log('圆周长：' + circle.circumference(14));

为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到**export default**命令，为模块指定默认输出。

// export-default.js
export default function () {
  console.log('foo');
}
上面代码是一个模块文件export-default.js，它的默认输出是一个函数。

其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。

// import-default.js
import customName from './export-default';
customName(); // 'foo'

上面代码的import命令，可以用任意名称指向export-default.js输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时import命令后面，不使用大括号。
----------
@param
描述: 记录传递给一个函数的参数。 别名:
注释变量名 、 变量类型 和 变量说明 ,例如：

/**
 * @param {string} somebody - Somebody's name.  # 变量类型，变量名，说明;
 */

function sayHello(somebody) {
    alert('Hello ' + somebody);
}

----------
ES6类的所有方法都定义在类的prototype属性上面；
    class Point {
      constructor() {
        // ...
      }

      toString() {
        // ...
      }

      toValue() {
        // ...
      }
    }

    // 等同于

    Point.prototype = {
      constructor() {},
      toString() {},
      toValue() {},
    };

与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。
    //定义类
    class Point {
      constructor(x, y) {
        this.x = x;
        this.y = y;
      }

      toString() {
        return '(' + this.x + ', ' + this.y + ')';
      }
    }

    var point = new Point(2, 3);

    point.toString() // (2, 3)

    point.hasOwnProperty('x') // true
    point.hasOwnProperty('y') // true
    point.hasOwnProperty('toString') // false
    point.__proto__.hasOwnProperty('toString') // true
    上面代码中，x和y都是实例对象point自身的属性（因为定义在this变量上），所以hasOwnProperty方法返回true，而toString是原型对象的属性（因为定义在Point类上），所以hasOwnProperty方法返回false。这些都与 ES5 的行为保持一致。
----------
Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。
----------